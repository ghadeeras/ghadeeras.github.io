import { Vector } from "./vector.js";
import { Matrix } from "./matrix.js";
import * as WA from "./wa.js";
export declare function vec(...coordinates: number[]): Vector;
export declare function mat(...columns: Vector[]): Matrix;
export declare type Reference = number;
export declare type StackExports = {
    stack: WebAssembly.Memory;
    enter: () => void;
    leave: () => void;
    allocate8: (size: number) => Reference;
    allocate16: (size: number) => Reference;
    allocate32: (size: number) => Reference;
    allocate64: (size: number) => Reference;
};
export declare type SpaceExports = {
    vec2: (x: number, y: number) => Reference;
    vec3: (x: number, y: number, z: number) => Reference;
    vec4: (x: number, y: number, z: number, w: number) => Reference;
    vec2Clone: (v: Reference) => Reference;
    vec3Clone: (v: Reference) => Reference;
    vec4Clone: (v: Reference) => Reference;
    vec2Swizzle: (v: Reference, x: number, y: number) => Reference;
    vec3Swizzle: (v: Reference, x: number, y: number, z: number) => Reference;
    vec4Swizzle: (v: Reference, x: number, y: number, z: number, w: number) => Reference;
    vecX: (v: Reference) => number;
    vecY: (v: Reference) => number;
    vecZ: (v: Reference) => number;
    vecW: (v: Reference) => number;
    vec2Add: (v1: Reference, v2: Reference) => Reference;
    vec3Add: (v1: Reference, v2: Reference) => Reference;
    vec4Add: (v1: Reference, v2: Reference) => Reference;
    vec2Sub: (v1: Reference, v2: Reference) => Reference;
    vec3Sub: (v1: Reference, v2: Reference) => Reference;
    vec4Sub: (v1: Reference, v2: Reference) => Reference;
    vec2Scale: (v1: Reference, factor: number) => Reference;
    vec3Scale: (v1: Reference, factor: number) => Reference;
    vec4Scale: (v1: Reference, factor: number) => Reference;
    vec2Dot: (v1: Reference, v2: Reference) => number;
    vec3Dot: (v1: Reference, v2: Reference) => number;
    vec4Dot: (v1: Reference, v2: Reference) => number;
    vec2Cross: (v1: Reference, v2: Reference) => number;
    vec3Cross: (v1: Reference, v2: Reference) => Reference;
    vec2LengthSquared: (v: Reference) => number;
    vec3LengthSquared: (v: Reference) => number;
    vec4LengthSquared: (v: Reference) => number;
    vec2Length: (v: Reference) => number;
    vec3Length: (v: Reference) => number;
    vec4Length: (v: Reference) => number;
    vec2Unit: (v: Reference) => Reference;
    vec3Unit: (v: Reference) => Reference;
    vec4Unit: (v: Reference) => Reference;
};
export declare type ScalarFieldExports = {
    tessellateTetrahedron: (contourValue: number, point0: Reference, point1: Reference, point2: Reference, point3: Reference) => Reference;
    tessellateCube: (contourValue: number, point0: Reference, point1: Reference, point2: Reference, point3: Reference, point4: Reference, point5: Reference, point6: Reference, point7: Reference) => Reference;
    tesselateScalarField(fieldRef: Reference, resolution: number, contourValue: number): Reference;
};
export declare const modules: {
    stack: WA.Module<StackExports>;
    space: WA.Module<SpaceExports>;
    scalarField: WA.Module<ScalarFieldExports>;
};
export declare function initWaModules(onready: () => void): void;
//# sourceMappingURL=utils.d.ts.map