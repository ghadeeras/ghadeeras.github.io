export type StrictOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type KeyOfType<V, O> = FilteredKeysOf<O, keyof O, V>;
export type FilteredKeysOf<O, K, V> = K extends keyof O ? O[K] extends V ? K : never : never;
export type Supplier<T> = () => T;
export declare function failure<T>(message: string): T;
export declare function required<T>(value: T | null | undefined): T;
export declare function lazily<T>(constructor: Supplier<T>): Supplier<T>;
export declare function values<K extends string | number | symbol, V>(record: Record<K, V>): V[];
export declare function timeOut<T>(promise: Promise<T>, timeInMilliseconds: number, tag: string): Promise<T>;
