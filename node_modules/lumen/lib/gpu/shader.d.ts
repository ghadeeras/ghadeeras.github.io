import { Device } from "./device.js";
import { Definition, GPUObject } from "./meta.js";
import { TextureFormatSource, CaseObject } from "./utils.js";
export type ShaderModuleCode = CaseObject<"path" | "code", "path", string> | CaseObject<"path" | "code", "code", string>;
export type ShaderModuleDescriptor = ShaderModuleCode & {
    compilationHints?: Array<GPUShaderModuleCompilationHint>;
    templateFunction?: (code: string) => string;
};
export declare class ShaderModule extends GPUObject {
    readonly device: Device;
    readonly shaderModule: GPUShaderModule;
    readonly descriptor: Readonly<GPUShaderModuleDescriptor>;
    constructor(label: string, device: Device, code: string);
    static from(descriptor: ShaderModuleDescriptor): Definition<ShaderModule>;
    static create(descriptor: ShaderModuleDescriptor, device: Device, label: string): Promise<ShaderModule>;
    hasCompilationErrors(): Promise<boolean>;
    computePipeline(entryPoint: string, layout?: GPUPipelineLayout | "auto"): GPUComputePipeline;
    vertexState(entryPoint: string, buffers: (GPUVertexBufferLayout | number)[]): GPUVertexState;
    fragmentState(entryPoint: string, targets: (TextureFormatSource | null)[]): GPUFragmentState;
}
export declare const renderingShaders: {
    fullScreenPassVertex: (fragmentShader: string) => string;
    fullScreenPass: (shader: string) => string;
};
export type AppShaders<S extends AppShadersRecord> = {
    [k in keyof S]: ShaderModule;
};
export type AppShadersRecord = Record<string, AppShaderRecord>;
export type AppShaderRecord = {
    path: string;
    code?: never;
} | {
    code: string;
    path?: never;
};
export declare class AppShadersBuilder {
    private label;
    constructor(label: string);
    withShaders<S extends AppShadersRecord>(shaders: S): AppShadersBuilderWithShaders<S>;
}
export declare class AppShadersBuilderWithShaders<S extends AppShadersRecord> {
    private label;
    private shaders;
    constructor(label: string, shaders: S);
    build(device: Device, rootPath?: string, processor?: (code: string, path?: string | null) => string): Promise<AppShaders<S>>;
}
export declare function appShadersBuilder(label: string): AppShadersBuilder;
