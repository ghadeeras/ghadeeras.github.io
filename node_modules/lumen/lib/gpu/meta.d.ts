import { Device } from "./device.js";
export type Descriptor = {
    [k in string]: Definition<any> | GPUObject | Descriptor;
};
export type InferObject<D extends (Definition<any> | GPUObject | Descriptor)> = D extends Definition<infer O> ? O : D extends GPUObject ? D : D extends Descriptor ? {
    [k in keyof D]: InferObject<D[k]>;
} : never;
export declare class GPUObject {
    definition(): Definition<this>;
}
export declare class Definition<O> {
    private factory;
    private object;
    constructor(factory: (device: Device, label: string) => Promise<O> | O);
    create(device: Device, label: string): Promise<O>;
    static from<D extends Descriptor>(descriptor: D): Definition<InferObject<D>>;
    static of<O>(object: O): Definition<O>;
    static device(): Definition<Device>;
}
