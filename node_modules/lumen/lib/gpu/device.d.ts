import { BindGroupLayout, BindGroupLayoutEntries } from "./group.js";
import { Buffer, SyncBuffer } from "./buffer.js";
import { Canvas } from "./canvas.js";
import { CommandEncoder } from "./encoder.js";
import { ShaderModule } from "./shader.js";
import { Texture, Sampler } from "./texture.js";
import { Resource } from "./utils.js";
import { PipelineLayout, PipelineLayoutEntries } from "./pipeline.js";
import { GPUObject } from "./meta.js";
export declare class Device extends GPUObject {
    readonly device: GPUDevice;
    readonly adapter: GPUAdapter;
    constructor(device: GPUDevice, adapter: GPUAdapter);
    loadShaderModule(relativePath: string, templateFunction?: (code: string) => string, basePath?: string): Promise<ShaderModule>;
    labeledShaderModule(label: string, relativePath: string, templateFunction?: (code: string) => string, basePath?: string): Promise<ShaderModule>;
    shaderModule(label: string, rawShaderCode: string, templateFunction?: (code: string) => string): Promise<ShaderModule>;
    enqueueCommands(name: string, ...encodings: ((encoder: CommandEncoder) => void)[]): void;
    enqueueCommand(name: string, encoding: (encoder: CommandEncoder) => void): void;
    enqueue(...commands: GPUCommandBuffer[]): void;
    commands(name: string, ...encodings: ((encoder: CommandEncoder) => void)[]): GPUCommandBuffer[];
    command(name: string, encoding: (encoder: CommandEncoder) => void): GPUCommandBuffer;
    canvas(element: HTMLCanvasElement | string, sampleCount?: number): Canvas;
    texture(descriptor: GPUTextureDescriptor): Texture;
    sampler(descriptor?: GPUSamplerDescriptor | undefined): Sampler;
    buffer(label: string, usage: GPUBufferUsageFlags, dataOrSize: DataView | number, stride?: number): Buffer;
    syncBuffer(label: string, usage: GPUBufferUsageFlags, dataOrSize: DataView | number, stride?: number): SyncBuffer;
    groupLayout<L extends BindGroupLayoutEntries>(label: string, entries: L): BindGroupLayout<L>;
    pipelineLayout<L extends PipelineLayoutEntries>(label: string, entries: L): Promise<PipelineLayout<L>>;
    bindGroup(bindGroupLayout: GPUBindGroupLayout, resources: (Resource | GPUBindingResource)[]): GPUBindGroup;
    suggestedGroupSizes(): number[][];
    monitorErrors<T>(filter: GPUErrorFilter, expression: () => T): Promise<T>;
    static instance(): Promise<Device>;
}
