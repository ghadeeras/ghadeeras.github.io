import { Device } from "./device.js";
import { Resource } from "./utils.js";
export declare class Texture {
    readonly device: Device;
    readonly descriptor: GPUTextureDescriptor;
    private _texture;
    constructor(device: Device, descriptor: GPUTextureDescriptor);
    get texture(): GPUTexture;
    get size(): GPUExtent3DDictStrict;
    destroy(): void;
    resize(size: GPUExtent3DDictStrict): void;
    depthState(state?: Partial<GPUDepthStencilState>): GPUDepthStencilState;
    createView(descriptor?: GPUTextureViewDescriptor | undefined): TextureView;
    get isCopySrc(): boolean;
    get isTextureBinding(): boolean;
    get isSource(): boolean;
    asColorTargetState(state?: Partial<GPUColorTargetState>): GPUColorTargetState;
}
export declare class TextureView implements Resource {
    readonly texture: Texture;
    readonly view: GPUTextureView;
    constructor(texture: Texture, descriptor?: GPUTextureViewDescriptor | undefined);
    colorAttachment(clearValue?: GPUColor | undefined): GPURenderPassColorAttachment;
    depthAttachment(clearValue?: number | undefined): GPURenderPassDepthStencilAttachment;
    asBindingResource(): GPUBindingResource;
}
export declare class Sampler implements Resource {
    readonly device: Device;
    readonly descriptor: GPUSamplerDescriptor | undefined;
    readonly sampler: GPUSampler;
    constructor(device: Device, descriptor?: GPUSamplerDescriptor | undefined);
    asBindingResource(): GPUBindingResource;
}
