import { StrictOmit } from "../utils.js";
import { Device } from "./device.js";
import { Element } from "./types.js";
import { Resource } from "./utils.js";
export declare class Buffer implements Resource {
    readonly device: Device;
    readonly usage: GPUBufferUsageFlags;
    readonly stride: number;
    private _buffer;
    private _descriptor;
    private _size;
    private _strideCount;
    private writer;
    private reader;
    constructor(label: string, device: Device, usage: GPUBufferUsageFlags, dataOrSize: DataView | number, stride?: number);
    get buffer(): GPUBuffer;
    get descriptor(): Readonly<GPUBufferDescriptor>;
    get label(): string;
    get stridesCount(): number;
    destroy(): void;
    asBindingResource(binding?: StrictOmit<GPUBufferBinding, "buffer">): GPUBindingResource;
    setData(data: DataView): void;
    writeAt(bufferOffset: number, data: DataView, dataOffset?: number, size?: number): Promise<Buffer>;
    readAt(bufferOffset: number, data: DataView, dataOffset?: number, size?: number): Promise<DataView>;
    copyAt(thisOffset: number, that: Buffer, thatOffset: number, size: number): void;
    private newBlankBuffer;
    private newBuffer;
    private writeToMapWriteBuffer;
    private readFromMapReadBuffer;
    private writeToCopyDstBuffer;
    private readFromCopySrcBuffer;
}
export declare class SyncBuffer implements Resource {
    readonly gpuBuffer: Buffer;
    readonly cpuBuffer: DataView;
    private dirtyRange;
    private constructor();
    asBindingResource(binding?: StrictOmit<GPUBufferBinding, "buffer">): GPUBindingResource;
    get<T>(element: Element<T>): T;
    set<T>(element: Element<T>, value: T): void;
    private dirty;
    private clean;
    static create(label: string, device: Device, usage: GPUBufferUsageFlags, dataOrSize: DataView | number, stride?: number): SyncBuffer;
}
