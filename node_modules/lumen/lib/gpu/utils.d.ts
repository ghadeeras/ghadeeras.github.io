import { Canvas } from "./canvas.js";
import { Texture } from "./texture.js";
export interface Resource {
    asBindingResource(): GPUBindingResource;
}
export type TextureFormatSource = GPUColorTargetState | GPUTextureFormat | Texture | Canvas;
export type TypedArray = Float32Array | Int32Array | Int16Array | Int8Array | Uint32Array | Uint16Array | Uint8Array;
export type CaseObject<S extends string, K extends S, T> = {
    [k in K]: T;
} & {
    [k in Exclude<S, K>]?: never;
};
export declare function asColorTargetState(formatted: TextureFormatSource): GPUColorTargetState;
export declare function formatOf(formatted: TextureFormatSource): GPUTextureFormat;
export declare function dataView(array: TypedArray): DataView;
export declare function float32Array(view: DataView): Float32Array;
export declare function int32Array(view: DataView): Int32Array;
export declare function int16Array(view: DataView): Int16Array;
export declare function uint16Array(view: DataView): Uint16Array;
export declare function int8Array(view: DataView): Int8Array;
export declare function uint8Array(view: DataView): Uint8Array;
