import { KeyOfType } from "../utils.js";
import { Buffer, SyncBuffer } from "./buffer.js";
import { Device } from "./device.js";
import { Definition, GPUObject } from "./meta.js";
import { PipelineLayoutEntry } from "./pipeline.js";
import { Sampler, TextureView } from "./texture.js";
export type BindGroupDescriptor<L extends BindGroupLayoutDescriptor> = {
    layout: Definition<BindGroupLayout<L["entries"]>>;
    entries: BindGroupEntries<L["entries"]>;
};
export type BindGroupEntries<L extends BindGroupLayoutEntries> = {
    [k in keyof L]: BindGroupResource<InferResourceType<L[k]>>;
};
export type BindGroupResource<T extends ResourceType> = T extends "buffer" ? (SyncBuffer | Buffer) : T extends "texture" ? TextureView : T extends "storageTexture" ? TextureView : T extends "externalTexture" ? TextureView : T extends "sampler" ? Sampler : never;
export type InferResourceType<E extends GPUBindGroupLayoutEntry> = E extends BindGroupLayoutEntry<infer T> ? T : never;
export type BindGroupLayoutDescriptor = {
    entries: BindGroupLayoutEntries;
};
export type BindGroupLayoutEntries = Record<string, BindGroupLayoutEntry<any>>;
export type BindGroupLayoutEntry<T extends ResourceType> = BindGroupResourceBinding & BindGroupResourceLayout<T>;
export type ResourceType = "buffer" | "texture" | "storageTexture" | "externalTexture" | "sampler";
export type BindGroupResourceBinding = Omit<GPUBindGroupLayoutEntry, ResourceType>;
export type BindGroupResourceLayout<T extends ResourceType> = Pick<Required<GPUBindGroupLayoutEntry>, T>;
export declare class BindGroupLayout<L extends BindGroupLayoutEntries> extends GPUObject {
    readonly device: Device;
    readonly entries: L;
    readonly wrapped: GPUBindGroupLayout;
    readonly descriptor: GPUBindGroupLayoutDescriptor;
    constructor(label: string, device: Device, entries: L);
    static from<D extends BindGroupLayoutDescriptor>(descriptor: D): Definition<BindGroupLayout<D["entries"]>>;
    instance(label: string, entries: BindGroupEntries<L>): BindGroup<L>;
    asGroup(group: number): PipelineLayoutEntry<BindGroupLayout<L>>;
}
export declare class BindGroup<L extends BindGroupLayoutEntries> {
    readonly layout: BindGroupLayout<L>;
    readonly entries: BindGroupEntries<L>;
    readonly wrapped: GPUBindGroup;
    readonly descriptor: GPUBindGroupDescriptor;
    constructor(label: string, layout: BindGroupLayout<L>, entries: BindGroupEntries<L>);
    static from<D extends BindGroupLayoutDescriptor>(descriptor: BindGroupDescriptor<D>): Definition<BindGroup<D["entries"]>>;
}
export declare function buffer(type: GPUBufferBindingType): BindGroupResourceLayout<"buffer">;
export declare function texture(sampleType: GPUTextureSampleType, viewDimension?: GPUTextureViewDimension, multisampled?: boolean): BindGroupResourceLayout<"texture">;
export declare function storageTexture(format: GPUTextureFormat, viewDimension?: GPUTextureViewDimension, multisampled?: boolean): BindGroupResourceLayout<"storageTexture">;
export declare function sampler(type: GPUSamplerBindingType): BindGroupResourceLayout<"sampler">;
export declare function binding<T extends ResourceType>(binding: number, visibility: KeyOfType<number, typeof GPUShaderStage>[], resource: BindGroupResourceLayout<T>): BindGroupLayoutEntry<T>;
