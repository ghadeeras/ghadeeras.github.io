import { Context } from "./context.js";
import { Resource } from "../index.js";
export type NumberArray = Float32Array | Int32Array | Int16Array | Int8Array | Uint32Array | Uint16Array | Uint8Array;
export type BufferTarget = WebGL2RenderingContext["ARRAY_BUFFER" | "ELEMENT_ARRAY_BUFFER"];
export declare abstract class Buffer implements Resource {
    readonly target: BufferTarget;
    readonly context: Context;
    readonly byteStride: number;
    readonly glBuffer: WebGLBuffer;
    readonly usageHint: GLenum;
    protected _data: NumberArray;
    constructor(target: BufferTarget, context: Context, byteStride?: number, isDynamic?: boolean);
    destroy(): void;
    delete(): void;
    bind<T>(): void;
    get word(): number;
    get count(): number;
    get data(): NumberArray;
    set data(data: NumberArray);
    set uint32Data(data: number[] | ArrayBuffer);
    set uint16Data(data: number[] | ArrayBuffer);
    set uint8Data(data: number[] | ArrayBuffer);
}
export declare class AttributesBuffer extends Buffer {
    readonly context: Context;
    readonly byteStride: number;
    constructor(context: Context, byteStride?: number, isDynamic?: boolean);
    set float32Data(data: number[] | ArrayBuffer);
    set int32Data(data: number[] | ArrayBuffer);
    set int16Data(data: number[] | ArrayBuffer);
    set int8Data(data: number[] | ArrayBuffer);
    draw(mode: GLenum, count?: number, first?: number): void;
}
export declare class IndicesBuffer extends Buffer {
    private type;
    constructor(context: Context, isDynamic?: boolean);
    private glTypeOf;
    set data(data: NumberArray);
    draw(mode: GLenum, count?: number, offset?: number): void;
}
