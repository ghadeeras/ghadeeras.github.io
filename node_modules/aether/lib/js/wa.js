export async function loadModules(waPath, modulePaths, resourceLoader = load) {
    const result = {};
    for (const moduleName in modulePaths) {
        const modulePath = modulePaths[moduleName];
        const path = `${waPath}/${modulePath}`;
        const buffer = await resourceLoader(path);
        result[moduleName] = new WebAssembly.Module(buffer);
    }
    return result;
}
export function syncLoadModules(waPath, modulePaths, resourceLoader) {
    const result = {};
    for (const moduleName in modulePaths) {
        const modulePath = modulePaths[moduleName];
        const path = `${waPath}/${modulePath}`;
        const buffer = resourceLoader(path);
        result[moduleName] = new WebAssembly.Module(buffer);
    }
    return result;
}
export async function load(path) {
    const response = await fetch(path, { method: "get", mode: "no-cors" });
    const buffer = await response.arrayBuffer();
    return buffer;
}
export class Linker {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.linking = new Set();
        this.allInstances = {};
    }
    static create() {
        return new Linker({});
    }
    get instances() {
        return this.dependencies;
    }
    get imports() {
        return this.asImports(this.dependencies);
    }
    link(modules) {
        this.allInstances = { ...this.dependencies };
        for (const moduleName in modules) {
            this.linkModule(modules, moduleName);
        }
        const result = this.allInstances;
        return new Linker(result);
    }
    linkModule(modules, moduleName) {
        if (this.beginLinking(moduleName)) {
            const waModule = modules[moduleName];
            const impDescriptors = WebAssembly.Module.imports(waModule);
            for (const descriptor of impDescriptors) {
                if (descriptor.module in modules) {
                    this.linkModule(modules, descriptor.module);
                }
                else if (!(descriptor.module in this.allInstances)) {
                    throw new Error(`Missing dependency ${descriptor.module}`);
                }
            }
            const waInstance = new WebAssembly.Instance(waModule, this.asImports(this.allInstances));
            this.endLinking(moduleName, waInstance);
        }
    }
    asImports(instances) {
        const result = {};
        for (const moduleName in instances) {
            const instance = instances[moduleName];
            result[moduleName] = instance.exports;
        }
        return result;
    }
    beginLinking(moduleName) {
        if (moduleName in this.allInstances) {
            return false;
        }
        if (this.linking.has(moduleName)) {
            throw new Error(`Circular dependency in ${this.linking}`);
        }
        this.linking.add(moduleName);
        return true;
    }
    endLinking(moduleName, waInstance) {
        this.linking.delete(moduleName);
        this.allInstances[moduleName] = waInstance;
    }
}
export function required(value) {
    if (!value) {
        throw new Error("Required value is null or undefined!!!");
    }
    return value;
}
