export type WebAssemblyModulePaths<N extends string> = Record<N, string>;
export type WebAssemblyModules<N extends string> = Record<N, WebAssembly.Module>;
export type WebAssemblyInstance = Pick<WebAssembly.Instance, any>;
export type WebAssemblyInstances<N extends string> = Record<N, WebAssemblyInstance>;
export type ResourceLoader = (path: string) => Promise<BufferSource>;
export type SyncResourceLoader = (path: string) => BufferSource;
export declare function loadModules<N extends string>(waPath: string, modulePaths: WebAssemblyModulePaths<N>, resourceLoader?: ResourceLoader): Promise<WebAssemblyModules<N>>;
export declare function syncLoadModules<N extends string>(waPath: string, modulePaths: WebAssemblyModulePaths<N>, resourceLoader: SyncResourceLoader): WebAssemblyModules<N>;
export declare function load(path: string): Promise<ArrayBuffer>;
export declare class Linker<D extends (string | keyof {})> {
    private dependencies;
    private linking;
    private allInstances;
    constructor(dependencies: WebAssemblyInstances<D>);
    static create(): Linker<never>;
    get instances(): WebAssemblyInstances<D>;
    get imports(): WebAssembly.Imports;
    link<M extends string>(modules: WebAssemblyModules<M>): Linker<D | M>;
    private linkModule;
    private asImports;
    private beginLinking;
    private endLinking;
}
export declare function required<T>(value: T | null | undefined): T;
