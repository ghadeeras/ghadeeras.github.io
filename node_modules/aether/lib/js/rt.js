import * as wa from "./wa.js";
export function runtimeModulePaths() {
    return {
        rawMem: "rawMem.wasm",
        mem: "mem.wasm",
        space: "space.wasm",
        delay: "delay.wasm",
    };
}
export async function runtime(rawMem = null, resourceLoader = wa.load) {
    const modules = await loadRuntimeModules(import.meta.url + "/../../wa", resourceLoader);
    return createRuntime(modules, rawMem);
}
export function syncRuntime(rawMem = null, resourceLoader) {
    const modules = syncLoadRuntimeModules(import.meta.dirname + "/../wa", resourceLoader);
    return createRuntime(modules, rawMem);
}
export function createRuntime(modules, rawMem = null) {
    if (rawMem) {
        modules.rawMem = new WebAssembly.Module(rawMem);
    }
    return linkRuntime(modules);
}
export async function loadRuntimeModules(waPath, resourceLoader = wa.load) {
    return await wa.loadModules(waPath, runtimeModulePaths(), resourceLoader);
}
export function syncLoadRuntimeModules(waPath, resourceLoader) {
    return wa.syncLoadModules(waPath, runtimeModulePaths(), resourceLoader);
}
export function linkRuntime(modules) {
    const instances = wa.Linker.create()
        .link(modules)
        .instances;
    return {
        modules: modules,
        instances: instances,
        exports: {
            rawMem: instances.rawMem.exports,
            mem: instances.mem.exports,
            space: instances.space.exports,
            delay: instances.delay.exports,
        }
    };
}
